head(logger.results.validation2)
logger.results.validation2$RMSI1 <- logger.results.validation2$RMSI1 + logger.results.validation2$RMSI2
head(logger.results.validation2)
logger.results.validation$PrFault <- predict(NeuralModel,logger.results.validation)
# Measure performance
performance <- logger.results.validation %>%
group_by(FAULT) %>%
summarise (Score = sum(PrFault))
print(performance)
print(paste("Score =",performance$Score[2]-performance$Score[1],"/",sum(logger.results$FAULT==TRUE)))
# Interrogate results
StartTime <- force_tz(as.POSIXct("2015-03-17 09:19:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
EndTime <- force_tz(as.POSIXct("2015-03-17 14:21:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
logger.results.validation2 <- subset(logger.results.validation, logger.results.validation$TS >= StartTime & logger.results.validation$TS <= EndTime)
plot(logger.results.validation2$TS,logger.results.validation2$RMSI1, type="l")
polygon(logger.results.validation2$TS,logger.results.validation2$PrFault*max(logger.results.validation2$RMSI1), col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
#polygon(logger.results.validation2$TS,logger.results.validation2$FAULT*max(logger.results.validation2$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
logger.results.validation$PrFault <- predict(NeuralModel,logger.results.validation2)
# Measure performance
performance <- logger.results.validation2 %>%
group_by(FAULT) %>%
summarise (Score = sum(PrFault))
print(performance)
print(paste("Score =",performance$Score[2]-performance$Score[1],"/",sum(logger.results$FAULT==TRUE)))
# Interrogate results
StartTime <- force_tz(as.POSIXct("2015-03-17 09:19:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
EndTime <- force_tz(as.POSIXct("2015-03-17 14:21:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
logger.results.validation2 <- subset(logger.results.validation, logger.results.validation$TS >= StartTime & logger.results.validation$TS <= EndTime)
plot(logger.results.validation2$TS,logger.results.validation2$RMSI1, type="l")
polygon(logger.results.validation2$TS,logger.results.validation2$PrFault*max(logger.results.validation2$RMSI1), col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
#polygon(logger.results.validation2$TS,logger.results.validation2$FAULT*max(logger.results.validation2$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
logger.results.validation2$PrFault <- predict(NeuralModel,logger.results.validation2)
# Measure performance
performance <- logger.results.validation2 %>%
group_by(FAULT) %>%
summarise (Score = sum(PrFault))
print(performance)
print(paste("Score =",performance$Score[2]-performance$Score[1],"/",sum(logger.results$FAULT==TRUE)))
# Interrogate results
StartTime <- force_tz(as.POSIXct("2015-03-17 09:19:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
EndTime <- force_tz(as.POSIXct("2015-03-17 14:21:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
logger.results.validation2 <- subset(logger.results.validation, logger.results.validation$TS >= StartTime & logger.results.validation$TS <= EndTime)
plot(logger.results.validation2$TS,logger.results.validation2$RMSI1, type="l")
polygon(logger.results.validation2$TS,logger.results.validation2$PrFault*max(logger.results.validation2$RMSI1), col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
#polygon(logger.results.validation2$TS,logger.results.validation2$FAULT*max(logger.results.validation2$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
# Interrogate results
StartTime <- force_tz(as.POSIXct("2015-03-17 13:00:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
EndTime <- force_tz(as.POSIXct("2015-03-17 13:30:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
logger.results.validation3 <- subset(logger.results.validation2, logger.results.validation2$TS >= StartTime & logger.results.validation2$TS <= EndTime)
plot(logger.results.validation3$TS,logger.results.validation3$RMSI1, type="l")
polygon(logger.results.validation3$TS,logger.results.validation3$PrFault*max(logger.results.validation3$RMSI1), col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
#polygon(logger.results.validation2$TS,logger.results.validation2$FAULT*max(logger.results.validation2$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
# Interrogate results
StartTime <- force_tz(as.POSIXct("2015-03-17 13:00:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
EndTime <- force_tz(as.POSIXct("2015-03-17 13:30:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
logger.results.validation3 <- subset(logger.results.validation2, logger.results.validation2$TS >= StartTime & logger.results.validation2$TS <= EndTime)
plot(logger.results.validation3$TS,logger.results.validation3$RMSI1, type="l")
polygon(logger.results.validation3$TS,logger.results.validation3$PrFault*max(logger.results.validation3$RMSI1), col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
polygon(logger.results.validation3$TS,logger.results.validation3$FAULT*max(logger.results.validation3$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
# Interrogate results
StartTime <- force_tz(as.POSIXct("2015-03-17 13:00:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
EndTime <- force_tz(as.POSIXct("2015-03-17 13:30:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
logger.results.validation3 <- subset(logger.results.validation2, logger.results.validation2$TS >= StartTime & logger.results.validation2$TS <= EndTime)
plot(logger.results.validation3$TS,logger.results.validation3$RMSI1, type="l")
polygon(logger.results.validation3$TS,logger.results.validation3$PrFault*max(logger.results.validation3$RMSI1), col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
#polygon(logger.results.validation3$TS,logger.results.validation3$FAULT*max(logger.results.validation3$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
head(logger.results.validation2)
logger.results.validation2 <- logger.results.validation
logger.results.validation2$RMSI1 <- (logger.results.validation2$RMSI1 + logger.results.validation2$RMSI2)
head(logger.results.validation2)
# Interrogate results
StartTime <- force_tz(as.POSIXct("2015-03-17 13:00:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
EndTime <- force_tz(as.POSIXct("2015-03-17 13:30:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
logger.results.validation3 <- subset(logger.results.validation2, logger.results.validation2$TS >= StartTime & logger.results.validation2$TS <= EndTime)
plot(logger.results.validation3$TS,logger.results.validation3$RMSI1, type="l")
polygon(logger.results.validation3$TS,logger.results.validation3$PrFault*max(logger.results.validation3$RMSI1), col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
#polygon(logger.results.validation3$TS,logger.results.validation3$FAULT*max(logger.results.validation3$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
logger.results.validation2$PrFault <- predict(NeuralModel,logger.results.validation2)
# Interrogate results
StartTime <- force_tz(as.POSIXct("2015-03-17 13:00:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
EndTime <- force_tz(as.POSIXct("2015-03-17 13:30:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
logger.results.validation3 <- subset(logger.results.validation2, logger.results.validation2$TS >= StartTime & logger.results.validation2$TS <= EndTime)
plot(logger.results.validation3$TS,logger.results.validation3$RMSI1, type="l")
polygon(logger.results.validation3$TS,logger.results.validation3$PrFault*max(logger.results.validation3$RMSI1), col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
#polygon(logger.results.validation3$TS,logger.results.validation3$FAULT*max(logger.results.validation3$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
# Interrogate results
StartTime <- force_tz(as.POSIXct("2015-03-17 09:00:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
EndTime <- force_tz(as.POSIXct("2015-03-17 13:30:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
logger.results.validation3 <- subset(logger.results.validation2, logger.results.validation2$TS >= StartTime & logger.results.validation2$TS <= EndTime)
plot(logger.results.validation3$TS,logger.results.validation3$RMSI1, type="l")
polygon(logger.results.validation3$TS,logger.results.validation3$PrFault*max(logger.results.validation3$RMSI1), col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
#polygon(logger.results.validation3$TS,logger.results.validation3$FAULT*max(logger.results.validation3$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
logger.results.training$RMSI1 <- (logger.results.training$RMSI1 + logger.results.training$RMSI2)
head(logger.results.training)
NeuralModel = nnet(FAULT~RMSI1, data=logger.results.training,size=20,maxit=1000,decay=.001)
logger.results.validation2$PrFault <- predict(NeuralModel,logger.results.validation2)
# Measure performance
performance <- logger.results.validation2 %>%
group_by(FAULT) %>%
summarise (Score = sum(PrFault))
print(performance)
print(paste("Score =",performance$Score[2]-performance$Score[1],"/",sum(logger.results$FAULT==TRUE)))
# Interrogate results
StartTime <- force_tz(as.POSIXct("2015-03-17 09:00:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
EndTime <- force_tz(as.POSIXct("2015-03-17 13:30:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
logger.results.validation3 <- subset(logger.results.validation2, logger.results.validation2$TS >= StartTime & logger.results.validation2$TS <= EndTime)
plot(logger.results.validation3$TS,logger.results.validation3$RMSI1, type="l")
polygon(logger.results.validation3$TS,logger.results.validation3$PrFault*max(logger.results.validation3$RMSI1), col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
#polygon(logger.results.validation3$TS,logger.results.validation3$FAULT*max(logger.results.validation3$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
head(logger.results.validation2)
max(logger.results.validation2$PrFault)
# Interrogate results
StartTime <- force_tz(as.POSIXct("2015-03-17 09:00:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
EndTime <- force_tz(as.POSIXct("2015-03-17 13:30:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
logger.results.validation3 <- subset(logger.results.validation2, logger.results.validation2$TS >= StartTime & logger.results.validation2$TS <= EndTime)
plot(logger.results.validation3$TS,logger.results.validation3$RMSI1, type="l")
polygon(logger.results.validation3$TS,logger.results.validation3$PrFault*max(logger.results.validation3$RMSI1), col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
#polygon(logger.results.validation3$TS,logger.results.validation3$FAULT*max(logger.results.validation3$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
plot(logger.results.validation3$TS,logger.results.validation3$PrFault*max(logger.results.validation3$RMSI1))
polygon(logger.results.validation3$TS,logger.results.validation3$PrFault*max(logger.results.validation3$RMSI1), col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
plot(logger.results.validation3$TS,logger.results.validation3$RMSI1, type="l")
#plot(logger.results.validation3$TS,logger.results.validation3$PrFault*max(logger.results.validation3$RMSI1))
polygon(logger.results.validation3$TS,logger.results.validation3$PrFault*max(logger.results.validation3$RMSI1), col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
#polygon(logger.results.validation3$TS,logger.results.validation3$FAULT*max(logger.results.validation3$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
plot(logger.results.validation3$TS,logger.results.validation3$RMSI1, type="l", ylim=c(0,120))
#plot(logger.results.validation3$TS,logger.results.validation3$PrFault*max(logger.results.validation3$RMSI1))
polygon(logger.results.validation3$TS,logger.results.validation3$PrFault*max(logger.results.validation3$RMSI1), col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
#polygon(logger.results.validation3$TS,logger.results.validation3$FAULT*max(logger.results.validation3$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
plot(logger.results.validation3$TS,logger.results.validation3$RMSI1, type="l", ylim=c(0,120))
#plot(logger.results.validation3$TS,logger.results.validation3$PrFault*max(logger.results.validation3$RMSI1))
polygon(logger.results.validation3$TS,logger.results.validation3$PrFault*120, col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
#polygon(logger.results.validation3$TS,logger.results.validation3$FAULT*max(logger.results.validation3$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
plot(logger.results.validation3$TS,logger.results.validation3$RMSI1, type="l", ylim=c(0,120))
#plot(logger.results.validation3$TS,logger.results.validation3$PrFault*max(logger.results.validation3$RMSI1))
polygon(logger.results.validation3$TS,logger.results.validation3$PrFault*120, col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
polygon(logger.results.validation3$TS,logger.results.validation3$FAULT*max(logger.results.validation3$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
NeuralModel$nunits
NeuralModel$nconn
NeuralModel$nunits
NeuralModel = nnet(FAULT~., data=logger.results.training,size=20,maxit=1000,decay=.001)
logger.results.validation2$PrFault <- predict(NeuralModel,logger.results.validation2)
# Measure performance
performance <- logger.results.validation2 %>%
group_by(FAULT) %>%
summarise (Score = sum(PrFault))
print(performance)
print(paste("Score =",performance$Score[2]-performance$Score[1],"/",sum(logger.results$FAULT==TRUE)))
# Interrogate results
StartTime <- force_tz(as.POSIXct("2015-03-17 09:00:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
EndTime <- force_tz(as.POSIXct("2015-03-17 13:30:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
logger.results.validation3 <- subset(logger.results.validation2, logger.results.validation2$TS >= StartTime & logger.results.validation2$TS <= EndTime)
plot(logger.results.validation3$TS,logger.results.validation3$RMSI1, type="l", ylim=c(0,120))
#plot(logger.results.validation3$TS,logger.results.validation3$PrFault*max(logger.results.validation3$RMSI1))
polygon(logger.results.validation3$TS,logger.results.validation3$PrFault*120, col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
polygon(logger.results.validation3$TS,logger.results.validation3$FAULT*max(logger.results.validation3$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
logger.results.training$RMSI1 <- (logger.results.training$RMSI1 + logger.results.training$RMSI2)
NeuralModel = nnet(FAULT~., data=logger.results.training,size=20,maxit=1000,decay=.001)
logger.results.validation2$PrFault <- predict(NeuralModel,logger.results.validation2)
# Measure performance
performance <- logger.results.validation2 %>%
group_by(FAULT) %>%
summarise (Score = sum(PrFault))
print(performance)
print(paste("Score =",performance$Score[2]-performance$Score[1],"/",sum(logger.results$FAULT==TRUE)))
# Interrogate results
StartTime <- force_tz(as.POSIXct("2015-03-17 09:00:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
EndTime <- force_tz(as.POSIXct("2015-03-17 13:30:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
logger.results.validation3 <- subset(logger.results.validation2, logger.results.validation2$TS >= StartTime & logger.results.validation2$TS <= EndTime)
plot(logger.results.validation3$TS,logger.results.validation3$RMSI1, type="l", ylim=c(0,120))
#plot(logger.results.validation3$TS,logger.results.validation3$PrFault*max(logger.results.validation3$RMSI1))
polygon(logger.results.validation3$TS,logger.results.validation3$PrFault*120, col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
polygon(logger.results.validation3$TS,logger.results.validation3$FAULT*max(logger.results.validation3$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
# Interrogate results
StartTime <- force_tz(as.POSIXct("2015-03-17 11:00:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
EndTime <- force_tz(as.POSIXct("2015-03-17 12:30:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
logger.results.validation3 <- subset(logger.results.validation2, logger.results.validation2$TS >= StartTime & logger.results.validation2$TS <= EndTime)
plot(logger.results.validation3$TS,logger.results.validation3$RMSI1, type="l", ylim=c(0,120))
#plot(logger.results.validation3$TS,logger.results.validation3$PrFault*max(logger.results.validation3$RMSI1))
polygon(logger.results.validation3$TS,logger.results.validation3$PrFault*120, col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
polygon(logger.results.validation3$TS,logger.results.validation3$FAULT*max(logger.results.validation3$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
# Interrogate results
StartTime <- force_tz(as.POSIXct("2015-03-17 11:00:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
EndTime <- force_tz(as.POSIXct("2015-03-17 11:30:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
logger.results.validation3 <- subset(logger.results.validation2, logger.results.validation2$TS >= StartTime & logger.results.validation2$TS <= EndTime)
plot(logger.results.validation3$TS,logger.results.validation3$RMSI1, type="l", ylim=c(0,120))
#plot(logger.results.validation3$TS,logger.results.validation3$PrFault*max(logger.results.validation3$RMSI1))
polygon(logger.results.validation3$TS,logger.results.validation3$PrFault*120, col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
polygon(logger.results.validation3$TS,logger.results.validation3$FAULT*max(logger.results.validation3$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
logger.results.validation2$PrFault <- predict(NeuralModel,logger.results.validation2)
logger.results.training$RMSI1 <- (logger.results.training$RMSI1 + logger.results.training$RMSI2)
logger.results.validation$RMSI1 <- (logger.results.validation$RMSI1 + logger.results.validation$RMSI2)
NeuralModel = nnet(FAULT~., data=logger.results.training,size=20,maxit=1000,decay=.001)
logger.results.validation$PrFault <- predict(NeuralModel,logger.results.validation)
logger.results.training$RMSI1 <- (logger.results.training$RMSI1 + logger.results.training$RMSI2)
logger.results.validation$RMSI1 <- (logger.results.validation$RMSI1 + logger.results.validation$RMSI2)
NeuralModel = nnet(FAULT~., data=logger.results.training,size=20,maxit=1000,decay=.001)
logger.results.validation$PrFault <- predict(NeuralModel,logger.results.validation)
# Measure performance
performance <- logger.results.validation2 %>%
group_by(FAULT) %>%
summarise (Score = sum(PrFault))
print(performance)
print(paste("Score =",performance$Score[2]-performance$Score[1],"/",sum(logger.results$FAULT==TRUE)))
# Interrogate results
StartTime <- force_tz(as.POSIXct("2015-03-17 11:00:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
EndTime <- force_tz(as.POSIXct("2015-03-17 11:30:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
logger.results.validation.subset <- subset(logger.results.validation, logger.results.validation$TS >= StartTime & logger.results.validation$TS <= EndTime)
plot(logger.results.validation.subset$TS,logger.results.validation.subset$RMSI1, type="l", ylim=c(0,120))
#plot(logger.results.validation3$TS,logger.results.validation3$PrFault*max(logger.results.validation3$RMSI1))
polygon(logger.results.validation.subset$TS,logger.results.validation.subset$PrFault*120, col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FAULT*max(logger.results.validation.subset$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
# Measure performance
performance <- logger.results.validation %>%
group_by(FAULT) %>%
summarise (Score = sum(PrFault))
print(performance)
print(paste("Score =",performance$Score[2]-performance$Score[1],"/",sum(logger.results$FAULT==TRUE)))
# Interrogate results
StartTime <- force_tz(as.POSIXct("2015-03-17 11:00:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
EndTime <- force_tz(as.POSIXct("2015-03-17 11:30:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
logger.results.validation.subset <- subset(logger.results.validation, logger.results.validation$TS >= StartTime & logger.results.validation$TS <= EndTime)
plot(logger.results.validation.subset$TS,logger.results.validation.subset$RMSI1, type="l", ylim=c(0,120))
#plot(logger.results.validation3$TS,logger.results.validation3$PrFault*max(logger.results.validation3$RMSI1))
polygon(logger.results.validation.subset$TS,logger.results.validation.subset$PrFault*120, col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FAULT*max(logger.results.validation.subset$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
plot(logger.results.validation.subset$TS,logger.results.validation.subset$PrFault*max(logger.results.validation.subset$RMSI1))
# Interrogate results
StartTime <- force_tz(as.POSIXct("2015-03-17 09:00:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
EndTime <- force_tz(as.POSIXct("2015-03-17 15:00:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
logger.results.validation.subset <- subset(logger.results.validation, logger.results.validation$TS >= StartTime & logger.results.validation$TS <= EndTime)
plot(logger.results.validation.subset$TS,logger.results.validation.subset$PrFault*max(logger.results.validation.subset$RMSI1))
# Create Training Dataset
StartTime <- as.POSIXct("2015-03-17 09:00:00", format = "%Y-%m-%d %H:%M:%OS", tz = "UTC")
EndTime <- as.POSIXct("2015-03-17 11:00:00", format = "%Y-%m-%d %H:%M:%OS", tz = "UTC")
logger.results.training <- subset(logger.results, logger.results$TS >= StartTime & logger.results$TS <= EndTime)
# Create Validation Dataset
StartTime <- as.POSIXct("2015-03-17 08:00:00", format = "%Y-%m-%d %H:%M:%OS", tz = "UTC")
EndTime <- as.POSIXct("2015-03-17 15:00:00", format = "%Y-%m-%d %H:%M:%OS", tz = "UTC")
logger.results.validation <- subset(logger.results, logger.results$TS >= StartTime & logger.results$TS <= EndTime)
# Generate the neural network model
NeuralModel = nnet(FAULT~RMSI1, data=logger.results.training,size=20,maxit=1000,decay=.001)
#save(fault.network, file="test.rda")
#load("test.rda")
#logger.results.validation2 <- logger.results.validation
#logger.results.validation2$RMSI1 <- (logger.results.validation2$RMSI1 + logger.results.validation2$RMSI2)
#head(logger.results.validation2)
logger.results.training$RMSI1 <- (logger.results.training$RMSI1 + logger.results.training$RMSI2)
logger.results.validation$RMSI1 <- (logger.results.validation$RMSI1 + logger.results.validation$RMSI2)
NeuralModel = nnet(FAULT~., data=logger.results.training,size=20,maxit=1000,decay=.001)
logger.results.validation$PrFault <- predict(NeuralModel,logger.results.validation)
# Measure performance
performance <- logger.results.validation %>%
group_by(FAULT) %>%
summarise (Score = sum(PrFault))
print(performance)
print(paste("Score =",performance$Score[2]-performance$Score[1],"/",sum(logger.results$FAULT==TRUE)))
# Interrogate results
StartTime <- force_tz(as.POSIXct("2015-03-17 09:00:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
EndTime <- force_tz(as.POSIXct("2015-03-17 15:00:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
logger.results.validation.subset <- subset(logger.results.validation, logger.results.validation$TS >= StartTime & logger.results.validation$TS <= EndTime)
plot(logger.results.validation.subset$TS,logger.results.validation.subset$PrFault*max(logger.results.validation.subset$RMSI1))
max(logger.results.validation$PrFault)
# Create Training Dataset
StartTime <- as.POSIXct("2015-03-17 09:00:00", format = "%Y-%m-%d %H:%M:%OS", tz = "UTC")
EndTime <- as.POSIXct("2015-03-17 11:00:00", format = "%Y-%m-%d %H:%M:%OS", tz = "UTC")
logger.results.training <- subset(logger.results, logger.results$TS >= StartTime & logger.results$TS <= EndTime)
# Create Validation Dataset
StartTime <- as.POSIXct("2015-03-17 08:00:00", format = "%Y-%m-%d %H:%M:%OS", tz = "UTC")
EndTime <- as.POSIXct("2015-03-17 15:00:00", format = "%Y-%m-%d %H:%M:%OS", tz = "UTC")
logger.results.validation <- subset(logger.results, logger.results$TS >= StartTime & logger.results$TS <= EndTime)
# Superimpose load current on fault current
logger.results.training$RMSI1 <- (logger.results.training$RMSI1 + logger.results.training$RMSI2)
logger.results.validation$RMSI1 <- (logger.results.validation$RMSI1 + logger.results.validation$RMSI2)
# Train neural network
NeuralModel = nnet(FAULT~RMSI1, data=logger.results.training,size=20,maxit=1000,decay=.001)
# Make predictions based on neural network
logger.results.validation$PrFault <- predict(NeuralModel,logger.results.validation)
# Measure performance
performance <- logger.results.validation %>%
group_by(FAULT) %>%
summarise (Score = sum(PrFault))
print(performance)
print(paste("Score =",performance$Score[2]-performance$Score[1],"/",sum(logger.results$FAULT==TRUE)))
# Interrogate results
StartTime <- force_tz(as.POSIXct("2015-03-17 09:00:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
EndTime <- force_tz(as.POSIXct("2015-03-17 15:00:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
logger.results.validation.subset <- subset(logger.results.validation, logger.results.validation$TS >= StartTime & logger.results.validation$TS <= EndTime)
plot(logger.results.validation.subset$TS,logger.results.validation.subset$PrFault*max(logger.results.validation.subset$RMSI1))
plot(logger.results.validation.subset$TS,logger.results.validation.subset$RMSI1, type="l", ylim=c(0,120))
#plot(logger.results.validation.subset$TS,logger.results.validation.subset$PrFault*max(logger.results.validation.subset$RMSI1))
polygon(logger.results.validation.subset$TS,logger.results.validation.subset$PrFault*120, col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FAULT*max(logger.results.validation.subset$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
# Create Training Dataset
StartTime <- as.POSIXct("2015-03-17 09:00:00", format = "%Y-%m-%d %H:%M:%OS", tz = "UTC")
EndTime <- as.POSIXct("2015-03-17 11:00:00", format = "%Y-%m-%d %H:%M:%OS", tz = "UTC")
logger.results.training <- subset(logger.results, logger.results$TS >= StartTime & logger.results$TS <= EndTime)
# Create Validation Dataset
StartTime <- as.POSIXct("2015-03-17 08:00:00", format = "%Y-%m-%d %H:%M:%OS", tz = "UTC")
EndTime <- as.POSIXct("2015-03-17 15:00:00", format = "%Y-%m-%d %H:%M:%OS", tz = "UTC")
logger.results.validation <- subset(logger.results, logger.results$TS >= StartTime & logger.results$TS <= EndTime)
# Superimpose load current on fault current
#logger.results.training$RMSI1 <- (logger.results.training$RMSI1 + logger.results.training$RMSI2)
#logger.results.validation$RMSI1 <- (logger.results.validation$RMSI1 + logger.results.validation$RMSI2)
# Train neural network
NeuralModel = nnet(FAULT~RMSI1, data=logger.results.training,size=20,maxit=1000,decay=.001)
# Make predictions based on neural network
logger.results.validation$PrFault <- predict(NeuralModel,logger.results.validation)
# Measure performance
performance <- logger.results.validation %>%
group_by(FAULT) %>%
summarise (Score = sum(PrFault))
print(performance)
print(paste("Score =",performance$Score[2]-performance$Score[1],"/",sum(logger.results$FAULT==TRUE)))
# Interrogate results
StartTime <- force_tz(as.POSIXct("2015-03-17 09:00:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
EndTime <- force_tz(as.POSIXct("2015-03-17 15:00:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
logger.results.validation.subset <- subset(logger.results.validation, logger.results.validation$TS >= StartTime & logger.results.validation$TS <= EndTime)
plot(logger.results.validation.subset$TS,logger.results.validation.subset$RMSI1, type="l", ylim=c(0,120))
#plot(logger.results.validation.subset$TS,logger.results.validation.subset$PrFault*max(logger.results.validation.subset$RMSI1))
polygon(logger.results.validation.subset$TS,logger.results.validation.subset$PrFault*120, col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FAULT*max(logger.results.validation.subset$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
source ("Threshold_Optimise.R")
results <- Threshold_Optimise(logger.results.validation,0,1,0.1)
results
results <- Threshold_Optimise(logger.results.validation,0,1,0.01)
threshold <- results[which.max(results[,4]),1]
threshold
plot(results$Threshold,results$success)
# Optimise the trigger threshold
results <- Threshold_Optimise(logger.results.validation,0,1,0.05)
threshold <- results[which.max(results[,4]),1]
# Perform thresholding as per otimum value
logger.results.validation$FtDetected <- ifelse(logger.results.validation$PrFault<threshold,0,1)
# Measure performance
performance <- logger.results.validation %>%
group_by(FAULT) %>%
summarise (Score = sum(FtDetected))
print(performance)
print(paste("Score =",performance$Score[2]-performance$Score[1],"/",sum(logger.results$FAULT==TRUE)))
performance$FAULT
performance$Score
print(performance)
2226/3271
plot(logger.results.validation.subset$TS,logger.results.validation.subset$RMSI1, type="l", ylim=c(0,120))
#plot(logger.results.validation.subset$TS,logger.results.validation.subset$PrFault*max(logger.results.validation.subset$RMSI1))
polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FtDetected*120, col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FAULT*max(logger.results.validation.subset$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
# Interrogate results
StartTime <- force_tz(as.POSIXct("2015-03-17 09:00:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
EndTime <- force_tz(as.POSIXct("2015-03-17 15:00:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
logger.results.validation.subset <- subset(logger.results.validation, logger.results.validation$TS >= StartTime & logger.results.validation$TS <= EndTime)
plot(logger.results.validation.subset$TS,logger.results.validation.subset$RMSI1, type="l", ylim=c(0,120))
#plot(logger.results.validation.subset$TS,logger.results.validation.subset$PrFault*max(logger.results.validation.subset$RMSI1))
polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FtDetected*120, col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FAULT*max(logger.results.validation.subset$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
# Interrogate results
StartTime <- force_tz(as.POSIXct("2015-03-17 13:10:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
EndTime <- force_tz(as.POSIXct("2015-03-17 13:20:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
logger.results.validation.subset <- subset(logger.results.validation, logger.results.validation$TS >= StartTime & logger.results.validation$TS <= EndTime)
plot(logger.results.validation.subset$TS,logger.results.validation.subset$RMSI1, type="l", ylim=c(0,120))
#plot(logger.results.validation.subset$TS,logger.results.validation.subset$PrFault*max(logger.results.validation.subset$RMSI1))
polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FtDetected*120, col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FAULT*max(logger.results.validation.subset$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
# Interrogate results
StartTime <- force_tz(as.POSIXct("2015-03-17 13:10:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
EndTime <- force_tz(as.POSIXct("2015-03-17 13:20:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
logger.results.validation.subset <- subset(logger.results.validation, logger.results.validation$TS >= StartTime & logger.results.validation$TS <= EndTime)
plot(logger.results.validation.subset$TS,logger.results.validation.subset$RMSI1, type="l", ylim=c(0,120))
#plot(logger.results.validation.subset$TS,logger.results.validation.subset$PrFault*max(logger.results.validation.subset$RMSI1))
polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FtDetected, col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FAULT*max(logger.results.validation.subset$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
plot(logger.results.validation.subset$TS,logger.results.validation.subset$RMSI1, type="l")
#plot(logger.results.validation.subset$TS,logger.results.validation.subset$PrFault*max(logger.results.validation.subset$RMSI1))
polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FtDetected, col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FAULT*max(logger.results.validation.subset$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
# Interrogate results
StartTime <- force_tz(as.POSIXct("2015-03-17 13:18:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
EndTime <- force_tz(as.POSIXct("2015-03-17 13:19:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
logger.results.validation.subset <- subset(logger.results.validation, logger.results.validation$TS >= StartTime & logger.results.validation$TS <= EndTime)
plot(logger.results.validation.subset$TS,logger.results.validation.subset$RMSI1, type="l")
#plot(logger.results.validation.subset$TS,logger.results.validation.subset$PrFault*max(logger.results.validation.subset$RMSI1))
polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FtDetected, col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FAULT*max(logger.results.validation.subset$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
plot(logger.results.validation.subset$TS,logger.results.validation.subset$RMSI1, type="l")
#plot(logger.results.validation.subset$TS,logger.results.validation.subset$PrFault*max(logger.results.validation.subset$RMSI1))
polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FtDetected, col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
#polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FAULT*max(logger.results.validation.subset$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
plot(logger.results.validation.subset$TS,logger.results.validation.subset$RMSI1, type="l")
#plot(logger.results.validation.subset$TS,logger.results.validation.subset$PrFault*max(logger.results.validation.subset$RMSI1))
polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FtDetected*max(logger.results.validation.subset$RMSI1), col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
#polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FAULT*max(logger.results.validation.subset$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
plot(logger.results.validation.subset$TS,logger.results.validation.subset$RMSI1, type="l")
#plot(logger.results.validation.subset$TS,logger.results.validation.subset$PrFault*max(logger.results.validation.subset$RMSI1))
polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FtDetected*max(logger.results.validation.subset$RMSI1), col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FAULT*max(logger.results.validation.subset$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
#polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FAULT*max(logger.results.validation.subset$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
plot(logger.results.validation.subset$TS,logger.results.validation.subset$RMSI1, type="l")
#plot(logger.results.validation.subset$TS,logger.results.validation.subset$PrFault*max(logger.results.validation.subset$RMSI1))
polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FtDetected*max(logger.results.validation.subset$RMSI1), col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
#polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FAULT*max(logger.results.validation.subset$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
# Create Training Dataset
StartTime <- as.POSIXct("2015-03-17 09:00:00", format = "%Y-%m-%d %H:%M:%OS", tz = "UTC")
EndTime <- as.POSIXct("2015-03-17 11:00:00", format = "%Y-%m-%d %H:%M:%OS", tz = "UTC")
logger.results.training <- subset(logger.results, logger.results$TS >= StartTime & logger.results$TS <= EndTime)
# Create Validation Dataset
StartTime <- as.POSIXct("2015-03-17 08:00:00", format = "%Y-%m-%d %H:%M:%OS", tz = "UTC")
EndTime <- as.POSIXct("2015-03-17 15:00:00", format = "%Y-%m-%d %H:%M:%OS", tz = "UTC")
logger.results.validation <- subset(logger.results, logger.results$TS >= StartTime & logger.results$TS <= EndTime)
# Superimpose load current on fault current
logger.results.training$RMSI1 <- (logger.results.training$RMSI1 + logger.results.training$RMSI2)
logger.results.validation$RMSI1 <- (logger.results.validation$RMSI1 + logger.results.validation$RMSI2)
# Train neural network
NeuralModel = nnet(FAULT~RMSI1, data=logger.results.training,size=20,maxit=1000,decay=.001)
# Make predictions based on neural network
logger.results.validation$PrFault <- predict(NeuralModel,logger.results.validation)
# Optimise the trigger threshold
results <- Threshold_Optimise(logger.results.validation,0,1,0.05)
threshold <- results[which.max(results[,4]),1]
# Perform thresholding as per otimum value
logger.results.validation$FtDetected <- ifelse(logger.results.validation$PrFault<threshold,0,1)
# Measure performance
performance <- logger.results.validation %>%
group_by(FAULT) %>%
summarise (Score = sum(FtDetected))
print(performance)
print(paste("Score =",performance$Score[2]-performance$Score[1],"/",sum(logger.results$FAULT==TRUE)))
# Interrogate results
StartTime <- force_tz(as.POSIXct("2015-03-17 13:18:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
EndTime <- force_tz(as.POSIXct("2015-03-17 13:19:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
logger.results.validation.subset <- subset(logger.results.validation, logger.results.validation$TS >= StartTime & logger.results.validation$TS <= EndTime)
plot(logger.results.validation.subset$TS,logger.results.validation.subset$RMSI1, type="l")
#plot(logger.results.validation.subset$TS,logger.results.validation.subset$PrFault*max(logger.results.validation.subset$RMSI1))
polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FtDetected*max(logger.results.validation.subset$RMSI1), col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
#polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FAULT*max(logger.results.validation.subset$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
plot(logger.results.validation.subset$TS,logger.results.validation.subset$FtDetected*max(logger.results.validation.subset$RMSI1))
print(performance)
print(paste("Score =",performance$Score[2]-performance$Score[1],"/",sum(logger.results$FAULT==TRUE)))
# Create Training Dataset
StartTime <- as.POSIXct("2015-03-17 09:00:00", format = "%Y-%m-%d %H:%M:%OS", tz = "UTC")
EndTime <- as.POSIXct("2015-03-17 11:00:00", format = "%Y-%m-%d %H:%M:%OS", tz = "UTC")
logger.results.training <- subset(logger.results, logger.results$TS >= StartTime & logger.results$TS <= EndTime)
# Create Validation Dataset
StartTime <- as.POSIXct("2015-03-17 08:00:00", format = "%Y-%m-%d %H:%M:%OS", tz = "UTC")
EndTime <- as.POSIXct("2015-03-17 15:00:00", format = "%Y-%m-%d %H:%M:%OS", tz = "UTC")
logger.results.validation <- subset(logger.results, logger.results$TS >= StartTime & logger.results$TS <= EndTime)
# Superimpose load current on fault current
logger.results.training$RMSI1 <- (logger.results.training$RMSI1 + logger.results.training$RMSI2)
logger.results.validation$RMSI1 <- (logger.results.validation$RMSI1 + logger.results.validation$RMSI2)
# Train neural network
NeuralModel = nnet(FAULT~RMSI1, data=logger.results.training,size=20,maxit=1000,decay=.001)
# Make predictions based on neural network
logger.results.validation$PrFault <- predict(NeuralModel,logger.results.validation)
# Optimise the trigger threshold
results <- Threshold_Optimise(logger.results.validation,0,1,0.05)
threshold <- results[which.max(results[,4]),1]
# Perform thresholding as per otimum value
#logger.results.validation$FtDetected <- ifelse(logger.results.validation$PrFault<threshold,0,1)
logger.results.validation$FtDetected <- logger.results.validation$PrFault
# Measure performance
performance <- logger.results.validation %>%
group_by(FAULT) %>%
summarise (Score = sum(FtDetected))
print(performance)
print(paste("Score =",performance$Score[2]-performance$Score[1],"/",sum(logger.results$FAULT==TRUE)))
# Interrogate results
StartTime <- force_tz(as.POSIXct("2015-03-17 13:18:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
EndTime <- force_tz(as.POSIXct("2015-03-17 13:19:00", format = "%Y-%m-%d %H:%M:%OS"),"UTC")
logger.results.validation.subset <- subset(logger.results.validation, logger.results.validation$TS >= StartTime & logger.results.validation$TS <= EndTime)
plot(logger.results.validation.subset$TS,logger.results.validation.subset$RMSI1, type="l")
plot(logger.results.validation.subset$TS,logger.results.validation.subset$FtDetected*max(logger.results.validation.subset$RMSI1))
plot(logger.results.validation.subset$TS,logger.results.validation.subset$RMSI1, type="l")
#plot(logger.results.validation.subset$TS,logger.results.validation.subset$FtDetected*max(logger.results.validation.subset$RMSI1))
polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FtDetected*max(logger.results.validation.subset$RMSI1), col =rgb(1,0,0,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
#polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FAULT*max(logger.results.validation.subset$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab="",ylab="",yaxt="n",border = NA)
axis(4)
print(performance)
print(paste("Score =",performance$Score[2]-performance$Score[1],"/",sum(logger.results$FAULT==TRUE)))
75/3271
