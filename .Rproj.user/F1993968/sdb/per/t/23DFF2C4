{
    "contents" : "#########################################################\n# Artificial Neural Network Implementation \n#\n# Identification of faults through supervised learning \n# of an artificial neural network\n# \n# - Aaron Cousland 14/05/2015\n########################################################\n\nrequire (neuralnet)    # Nerual Network Package\nrequire (RODBC)        # Load RODBC package\nrequire (lubridate)    # Required to manipulate dates\n\n# Create a connection to the database called \"RTV\"\nodbcCloseAll()\nlocal.connection <- odbcConnect(\"RTV\", believeNRows=FALSE)\n\n# Query the database and put the results into the data frame logging.results\nlogger.results <- sqlQuery(local.connection,\"SELECT * FROM ELSPEC.RMS_TRAINING where ts between '17/Mar/15 08:00:00 AM' and '17/Mar/15 03:00:00 PM';\")\nodbcCloseAll()\n\n# Order by timestamp and force local timestamp\nlogger.results <- logger.results[with(logger.results, order(logger.results$TS)),]\nlogger.results$TS <- force_tz(logger.results$TS,\"UTC\")\n\n# Create Training Dataset\nStartTime <- as.POSIXct(\"2015-03-17 09:00:00\", format = \"%Y-%m-%d %H:%M:%OS\", tz = \"UTC\")\nEndTime <- as.POSIXct(\"2015-03-17 11:00:00\", format = \"%Y-%m-%d %H:%M:%OS\", tz = \"UTC\")\nlogger.results.training <- subset(logger.results, logger.results$TS >= StartTime & logger.results$TS <= EndTime)\n\n# Create Validation Dataset\nStartTime <- as.POSIXct(\"2015-03-17 08:00:00\", format = \"%Y-%m-%d %H:%M:%OS\", tz = \"UTC\")\nEndTime <- as.POSIXct(\"2015-03-17 15:00:00\", format = \"%Y-%m-%d %H:%M:%OS\", tz = \"UTC\")\nlogger.results.validation <- subset(logger.results, logger.results$TS >= StartTime & logger.results$TS <= EndTime)\n\n# Generate the neural network model\nfault.network <- neuralnet(FAULT~RMSI1,logger.results.training, hidden=5, threshold=0.01)\nsave(fault.network, file=\"test.rda\")\nload(\"test.rda\")\n\nprint(fault.network)\nplot(fault.network)\n\n#Generate 50 random numbers uniformly distributed between 0 and 100\n#And store them as a dataframe\ntraininginput <-  as.data.frame(runif(50, min=0, max=100))\ntrainingoutput <- sqrt(traininginput)\n\n#Column bind the data into one variable\ntrainingdata <- cbind(traininginput,trainingoutput)\ncolnames(trainingdata) <- c(\"Input\",\"Output\")\n\n#Train the neural network\n#Going to have 10 hidden layers\n#Threshold is a numeric value specifying the threshold for the partial\n#derivatives of the error function as stopping criteria.\nnet.sqrt <- neuralnet(Output~Input,trainingdata, hidden=5, threshold=0.001)\nprint(net.sqrt)\n\n#Plot the neural network\nplot(net.sqrt)\n\n#Test the neural network on some training data\ntestdata <- as.data.frame((1:10)^2) #Generate some squared numbers\nnet.results <- compute(net.sqrt, testdata) #Run them through the neural network\n\n#Lets see what properties net.sqrt has\nls(net.results)\n\n#Lets see the results\nprint(net.results$net.result)\n\n#Lets display a better version of the results\ncleanoutput <- cbind(testdata,sqrt(testdata),\n                     as.data.frame(net.results$net.result))\ncolnames(cleanoutput) <- c(\"Input\",\"Expected Output\",\"Neural Net Output\")\nprint(cleanoutput)",
    "created" : 1431561586994.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2418237960",
    "id" : "23DFF2C4",
    "lastKnownWriteTime" : 1431566380,
    "path" : "C:/Users/acousla1/OneDrive/Projects/Fault Anticipation/Code/Signature_Detection/Artificial-Neural-Network/main.R",
    "project_path" : "main.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}