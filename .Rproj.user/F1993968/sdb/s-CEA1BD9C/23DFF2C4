{
    "contents" : "#########################################################\n# Artificial Neural Network Implementation \n#\n# Identification of faults through supervised learning \n# of an artificial neural network\n# \n# - Aaron Cousland 14/05/2015\n########################################################\n\nrequire (nnet)         # Nerual Network Package\nrequire (RODBC)        # Load RODBC package\nrequire (lubridate)    # Required to manipulate dates\nrequire (dplyr)        # Required for performance measurement\n\nsource (\"Threshold_Optimise.R\")\n\n# Create a connection to the database called \"RTV\"\nodbcCloseAll()\nlocal.connection <- odbcConnect(\"RTV\", believeNRows=FALSE)\n\n# Query the database and put the results into the data frame logging.results\nlogger.results <- sqlQuery(local.connection,\"SELECT * FROM ELSPEC.RMS_TRAINING where ts between '17/Mar/15 08:00:00 AM' and '17/Mar/15 03:00:00 PM';\")\nodbcCloseAll()\n\n# Order by timestamp and force local timestamp\nlogger.results <- logger.results[with(logger.results, order(logger.results$TS)),]\nlogger.results$TS <- force_tz(logger.results$TS,\"UTC\")\n\n# Create Training Dataset\nStartTime <- as.POSIXct(\"2015-03-17 09:00:00\", format = \"%Y-%m-%d %H:%M:%OS\", tz = \"UTC\")\nEndTime <- as.POSIXct(\"2015-03-17 11:00:00\", format = \"%Y-%m-%d %H:%M:%OS\", tz = \"UTC\")\nlogger.results.training <- subset(logger.results, logger.results$TS >= StartTime & logger.results$TS <= EndTime)\n\n# Create Validation Dataset\nStartTime <- as.POSIXct(\"2015-03-17 08:00:00\", format = \"%Y-%m-%d %H:%M:%OS\", tz = \"UTC\")\nEndTime <- as.POSIXct(\"2015-03-17 15:00:00\", format = \"%Y-%m-%d %H:%M:%OS\", tz = \"UTC\")\nlogger.results.validation <- subset(logger.results, logger.results$TS >= StartTime & logger.results$TS <= EndTime)\n\n# Superimpose load current on fault current\nlogger.results.training$RMSI1 <- (logger.results.training$RMSI1 + logger.results.training$RMSI2)\nlogger.results.validation$RMSI1 <- (logger.results.validation$RMSI1 + logger.results.validation$RMSI2)\n\n# Train neural network\nNeuralModel = nnet(FAULT~RMSI1, data=logger.results.training,size=20,maxit=1000,decay=.001)\n\n# Make predictions based on neural network\nlogger.results.validation$PrFault <- predict(NeuralModel,logger.results.validation) \n\n# Optimise the trigger threshold\nresults <- Threshold_Optimise(logger.results.validation,0,1,0.05)\nthreshold <- results[which.max(results[,4]),1]\n\n# Perform thresholding as per otimum value\n#logger.results.validation$FtDetected <- ifelse(logger.results.validation$PrFault<threshold,0,1)\nlogger.results.validation$FtDetected <- logger.results.validation$PrFault\n\n# Measure performance\nperformance <- logger.results.validation %>%\n  group_by(FAULT) %>%\n  summarise (Score = sum(FtDetected))\nprint(performance)\nprint(paste(\"Score =\",performance$Score[2]-performance$Score[1],\"/\",sum(logger.results$FAULT==TRUE)))\n\n# Interrogate results\nStartTime <- force_tz(as.POSIXct(\"2015-03-17 13:18:00\", format = \"%Y-%m-%d %H:%M:%OS\"),\"UTC\")\nEndTime <- force_tz(as.POSIXct(\"2015-03-17 13:19:00\", format = \"%Y-%m-%d %H:%M:%OS\"),\"UTC\")\nlogger.results.validation.subset <- subset(logger.results.validation, logger.results.validation$TS >= StartTime & logger.results.validation$TS <= EndTime)\n\nplot(logger.results.validation.subset$TS,logger.results.validation.subset$RMSI1, type=\"l\")\n#plot(logger.results.validation.subset$TS,logger.results.validation.subset$FtDetected*max(logger.results.validation.subset$RMSI1))\npolygon(logger.results.validation.subset$TS,logger.results.validation.subset$FtDetected*max(logger.results.validation.subset$RMSI1), col =rgb(1,0,0,alpha=0.3),xlab=\"\",ylab=\"\",yaxt=\"n\",border = NA)\n#polygon(logger.results.validation.subset$TS,logger.results.validation.subset$FAULT*max(logger.results.validation.subset$RMSI1), col =rgb(0,0,1,alpha=0.3),xlab=\"\",ylab=\"\",yaxt=\"n\",border = NA)\naxis(4)\n",
    "created" : 1431561586994.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3413311547",
    "id" : "23DFF2C4",
    "lastKnownWriteTime" : 1431588892,
    "path" : "C:/Users/acousla1/OneDrive/Projects/Fault Anticipation/Code/Signature_Detection/Artificial-Neural-Network/main.R",
    "project_path" : "main.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}