
R version 3.1.3 (2015-03-09) -- "Smooth Sidewalk"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> #########################################################
> # Artificial Neural Network Training Routine 
> #
> # Identification of faults through supervised learning 
> # of an artificial neural network
> # 
> # - Aaron Cousland 14/05/2015
> ########################################################
> 
> require (neuralnet)    # Nerual Network Package
Loading required package: neuralnet
Warning message:
In library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :
  there is no package called ‘neuralnet’
> require (RODBC)        # Load RODBC package
Loading required package: RODBC
> require (lubridate)    # Required to manipulate dates
Loading required package: lubridate
> 
> # Create a connection to the database called "RTV"
> odbcCloseAll()
> local.connection <- odbcConnect("RTV", believeNRows=FALSE)
> 
> # Query the database and put the results into the data frame logging.results
> logger.results <- sqlQuery(local.connection,"SELECT * FROM ELSPEC.RMS_TRAINING where ts between '17/Mar/15 08:00:00 AM' and '17/Mar/15 03:00:00 PM';")
> odbcCloseAll()
> 
> # Order by timestamp and force local timestamp
> logger.results <- logger.results[with(logger.results, order(logger.results$TS)),]
> logger.results$TS <- force_tz(logger.results$TS,"UTC")
> 
> # Create Training Dataset
> StartTime <- as.POSIXct("2015-03-17 09:00:00", format = "%Y-%m-%d %H:%M:%OS", tz = "UTC")
> EndTime <- as.POSIXct("2015-03-17 11:00:00", format = "%Y-%m-%d %H:%M:%OS", tz = "UTC")
> logger.results.training <- subset(logger.results, logger.results$TS >= StartTime & logger.results$TS <= EndTime)
> 
> # Create Validation Dataset
> StartTime <- as.POSIXct("2015-03-17 08:00:00", format = "%Y-%m-%d %H:%M:%OS", tz = "UTC")
> EndTime <- as.POSIXct("2015-03-17 15:00:00", format = "%Y-%m-%d %H:%M:%OS", tz = "UTC")
> logger.results.validation <- subset(logger.results, logger.results$TS >= StartTime & logger.results$TS <= EndTime)
> 
> # Generate the neural network model
> fault.network <- neuralnet(FAULT~RMSI1,logger.results.training, hidden=50, threshold=0.001)
Error: could not find function "neuralnet"
Execution halted
